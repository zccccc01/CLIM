// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: usercenter.proto

package server

import (
	"context"

	"CLIM/app/user/cmd/rpc/internal/logic"
	"CLIM/app/user/cmd/rpc/internal/svc"
	"CLIM/app/user/cmd/rpc/pb"
)

type UsercenterServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedUsercenterServer
}

func NewUsercenterServer(svcCtx *svc.ServiceContext) *UsercenterServer {
	return &UsercenterServer{
		svcCtx: svcCtx,
	}
}

func (s *UsercenterServer) Register(ctx context.Context, in *pb.RegisterReq) (*pb.RegisterResp, error) {
	l := logic.NewRegisterLogic(ctx, s.svcCtx)
	return l.Register(in)
}

func (s *UsercenterServer) Login(ctx context.Context, in *pb.LoginReq) (*pb.LoginResp, error) {
	l := logic.NewLoginLogic(ctx, s.svcCtx)
	return l.Login(in)
}

func (s *UsercenterServer) GetUser(ctx context.Context, in *pb.GetUserReq) (*pb.GetUserResp, error) {
	l := logic.NewGetUserLogic(ctx, s.svcCtx)
	return l.GetUser(in)
}

func (s *UsercenterServer) ChangePwd(ctx context.Context, in *pb.ChangePwdReq) (*pb.ChangePwdResp, error) {
	l := logic.NewChangePwdLogic(ctx, s.svcCtx)
	return l.ChangePwd(in)
}

func (s *UsercenterServer) UpdateUserInfo(ctx context.Context, in *pb.UpdateUserInfoReq) (*pb.UpdateUserInfoResp, error) {
	l := logic.NewUpdateUserInfoLogic(ctx, s.svcCtx)
	return l.UpdateUserInfo(in)
}

func (s *UsercenterServer) SetUserProfile(ctx context.Context, in *pb.SetUserProfileReq) (*pb.SetUserProfileResp, error) {
	l := logic.NewSetUserProfileLogic(ctx, s.svcCtx)
	return l.SetUserProfile(in)
}

func (s *UsercenterServer) GetUserProfile(ctx context.Context, in *pb.GetUserProfileReq) (*pb.GetUserProfileResp, error) {
	l := logic.NewGetUserProfileLogic(ctx, s.svcCtx)
	return l.GetUserProfile(in)
}

func (s *UsercenterServer) UpdateUserProfile(ctx context.Context, in *pb.UpdateUserProfileReq) (*pb.UpdateUserProfileResp, error) {
	l := logic.NewUpdateUserProfileLogic(ctx, s.svcCtx)
	return l.UpdateUserProfile(in)
}

func (s *UsercenterServer) GenerateToken(ctx context.Context, in *pb.GenerateTokenReq) (*pb.GenerateTokenResp, error) {
	l := logic.NewGenerateTokenLogic(ctx, s.svcCtx)
	return l.GenerateToken(in)
}
