// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"CLIM/app/user/dao/model"
)

func newFriendRequest(db *gorm.DB, opts ...gen.DOOption) friendRequest {
	_friendRequest := friendRequest{}

	_friendRequest.friendRequestDo.UseDB(db, opts...)
	_friendRequest.friendRequestDo.UseModel(&model.FriendRequest{})

	tableName := _friendRequest.friendRequestDo.TableName()
	_friendRequest.ALL = field.NewAsterisk(tableName)
	_friendRequest.RequestID = field.NewBytes(tableName, "request_id")
	_friendRequest.UserID = field.NewBytes(tableName, "user_id")
	_friendRequest.FriendID = field.NewBytes(tableName, "friend_id")
	_friendRequest.RequestMessage = field.NewString(tableName, "request_message")
	_friendRequest.VerificationStatus = field.NewInt32(tableName, "verification_status")
	_friendRequest.CreatedAt = field.NewTime(tableName, "created_at")
	_friendRequest.ExpirationAt = field.NewTime(tableName, "expiration_at")

	_friendRequest.fillFieldMap()

	return _friendRequest
}

type friendRequest struct {
	friendRequestDo friendRequestDo

	ALL                field.Asterisk
	RequestID          field.Bytes  // UUID for the friend request
	UserID             field.Bytes  // User UUID sending the request
	FriendID           field.Bytes  // Friend UUID receiving the request
	RequestMessage     field.String // Message sent with the friend request (optional)
	VerificationStatus field.Int32  // 0: pending, 1: accepted, 2: rejected
	CreatedAt          field.Time   // Request creation time
	ExpirationAt       field.Time   // Time when the request expires

	fieldMap map[string]field.Expr
}

func (f friendRequest) Table(newTableName string) *friendRequest {
	f.friendRequestDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f friendRequest) As(alias string) *friendRequest {
	f.friendRequestDo.DO = *(f.friendRequestDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *friendRequest) updateTableName(table string) *friendRequest {
	f.ALL = field.NewAsterisk(table)
	f.RequestID = field.NewBytes(table, "request_id")
	f.UserID = field.NewBytes(table, "user_id")
	f.FriendID = field.NewBytes(table, "friend_id")
	f.RequestMessage = field.NewString(table, "request_message")
	f.VerificationStatus = field.NewInt32(table, "verification_status")
	f.CreatedAt = field.NewTime(table, "created_at")
	f.ExpirationAt = field.NewTime(table, "expiration_at")

	f.fillFieldMap()

	return f
}

func (f *friendRequest) WithContext(ctx context.Context) *friendRequestDo {
	return f.friendRequestDo.WithContext(ctx)
}

func (f friendRequest) TableName() string { return f.friendRequestDo.TableName() }

func (f friendRequest) Alias() string { return f.friendRequestDo.Alias() }

func (f friendRequest) Columns(cols ...field.Expr) gen.Columns {
	return f.friendRequestDo.Columns(cols...)
}

func (f *friendRequest) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *friendRequest) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 7)
	f.fieldMap["request_id"] = f.RequestID
	f.fieldMap["user_id"] = f.UserID
	f.fieldMap["friend_id"] = f.FriendID
	f.fieldMap["request_message"] = f.RequestMessage
	f.fieldMap["verification_status"] = f.VerificationStatus
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["expiration_at"] = f.ExpirationAt
}

func (f friendRequest) clone(db *gorm.DB) friendRequest {
	f.friendRequestDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f friendRequest) replaceDB(db *gorm.DB) friendRequest {
	f.friendRequestDo.ReplaceDB(db)
	return f
}

type friendRequestDo struct{ gen.DO }

func (f friendRequestDo) Debug() *friendRequestDo {
	return f.withDO(f.DO.Debug())
}

func (f friendRequestDo) WithContext(ctx context.Context) *friendRequestDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f friendRequestDo) ReadDB() *friendRequestDo {
	return f.Clauses(dbresolver.Read)
}

func (f friendRequestDo) WriteDB() *friendRequestDo {
	return f.Clauses(dbresolver.Write)
}

func (f friendRequestDo) Session(config *gorm.Session) *friendRequestDo {
	return f.withDO(f.DO.Session(config))
}

func (f friendRequestDo) Clauses(conds ...clause.Expression) *friendRequestDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f friendRequestDo) Returning(value interface{}, columns ...string) *friendRequestDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f friendRequestDo) Not(conds ...gen.Condition) *friendRequestDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f friendRequestDo) Or(conds ...gen.Condition) *friendRequestDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f friendRequestDo) Select(conds ...field.Expr) *friendRequestDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f friendRequestDo) Where(conds ...gen.Condition) *friendRequestDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f friendRequestDo) Order(conds ...field.Expr) *friendRequestDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f friendRequestDo) Distinct(cols ...field.Expr) *friendRequestDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f friendRequestDo) Omit(cols ...field.Expr) *friendRequestDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f friendRequestDo) Join(table schema.Tabler, on ...field.Expr) *friendRequestDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f friendRequestDo) LeftJoin(table schema.Tabler, on ...field.Expr) *friendRequestDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f friendRequestDo) RightJoin(table schema.Tabler, on ...field.Expr) *friendRequestDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f friendRequestDo) Group(cols ...field.Expr) *friendRequestDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f friendRequestDo) Having(conds ...gen.Condition) *friendRequestDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f friendRequestDo) Limit(limit int) *friendRequestDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f friendRequestDo) Offset(offset int) *friendRequestDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f friendRequestDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *friendRequestDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f friendRequestDo) Unscoped() *friendRequestDo {
	return f.withDO(f.DO.Unscoped())
}

func (f friendRequestDo) Create(values ...*model.FriendRequest) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f friendRequestDo) CreateInBatches(values []*model.FriendRequest, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f friendRequestDo) Save(values ...*model.FriendRequest) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f friendRequestDo) First() (*model.FriendRequest, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FriendRequest), nil
	}
}

func (f friendRequestDo) Take() (*model.FriendRequest, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FriendRequest), nil
	}
}

func (f friendRequestDo) Last() (*model.FriendRequest, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FriendRequest), nil
	}
}

func (f friendRequestDo) Find() ([]*model.FriendRequest, error) {
	result, err := f.DO.Find()
	return result.([]*model.FriendRequest), err
}

func (f friendRequestDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FriendRequest, err error) {
	buf := make([]*model.FriendRequest, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f friendRequestDo) FindInBatches(result *[]*model.FriendRequest, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f friendRequestDo) Attrs(attrs ...field.AssignExpr) *friendRequestDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f friendRequestDo) Assign(attrs ...field.AssignExpr) *friendRequestDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f friendRequestDo) Joins(fields ...field.RelationField) *friendRequestDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f friendRequestDo) Preload(fields ...field.RelationField) *friendRequestDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f friendRequestDo) FirstOrInit() (*model.FriendRequest, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FriendRequest), nil
	}
}

func (f friendRequestDo) FirstOrCreate() (*model.FriendRequest, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FriendRequest), nil
	}
}

func (f friendRequestDo) FindByPage(offset int, limit int) (result []*model.FriendRequest, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f friendRequestDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f friendRequestDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f friendRequestDo) Delete(models ...*model.FriendRequest) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *friendRequestDo) withDO(do gen.Dao) *friendRequestDo {
	f.DO = *do.(*gen.DO)
	return f
}
